/** shifts of bit-precise integers.

    width: 7, 8, 9, 16, 24, 32, 33, 40, 48, 63, 64
    count: 1, 20, 40
    varstorage: auto, static
    countstorage: auto, static
    direction: 0, 1
*/

// TODO: Change count to count: 1, 4, 5, 7, 8, 9, 16, 20, 33, 40, 47, 48 once issues in regtest infrastructure (argument list too long error for mcs51-large-stack-auto) are fixed.

#include <testfwk.h>

// clang 11 supports bit-precise types, but deviates a bit from C23.
#if __clang_major__ == 11
#define __SDCC_BITINT_MAXWIDTH 128
#define _BitInt _ExtInt
#endif

#if __SDCC_BITINT_MAXWIDTH >= {width} // TODO: When we can regression-test in --std-c23 mode, use the standard macro from limits.h instead!
typedef unsigned _BitInt({width}) bitinttype;
typedef unsigned _BitInt(8) counttype;
#else
#if {width} <= 32
typedef unsigned int bitinttype;
#else
typedef unsigned long bitinttype;
#endif
typedef unsigned char counttype;
#endif

#define OPERAND0 ((bitinttype)0xa5b6c7d8e9fa)
#define OPERAND1 ((bitinttype)0x08192a3b4c5d6e7f)

// Lack of memory on pdk and mcs51
#if defined (__SDCC_pdk14) || defined (__SDCC_pdk15) && defined(__SDCC_STACK_AUTO)
#define MAXWIDTH 32
#elif defined (__SDCC_pdk15)
#define MAXWIDTH 40
#elif defined (__SDCC_mcs51) && defined(__SDCC_MODEL_SMALL)
#define MAXWIDTH 48
#else
#define MAXWDITH 64
#endif

bitinttype setoperand0(void)
{
	volatile bitinttype tmp = OPERAND0;
	return(tmp);
}

bitinttype setoperand1(void)
{
	volatile bitinttype tmp = OPERAND1;
	return(tmp);
}

counttype setcount(void)
{
	volatile counttype tmp = {count};
	return(tmp);
}

void testleftshift(void)
{
#if {width} <= MAXWIDTH && {count} < {width} && {direction} == 0
	{varstorage} bitinttype operand, result;
	{countstorage} counttype count;

	count = setcount();

	operand = setoperand0();
	result = operand << count;
	ASSERT (result == (OPERAND0 << {count}));

	operand = setoperand1();
	result = operand << count;
	ASSERT (result == (OPERAND1 << {count}));
#endif
}

void testrightshift(void)
{
#if {width} <= MAXWIDTH && {count} < {width} && {direction} == 1
	{varstorage} bitinttype operand, result;
	{countstorage} counttype count;

	count = setcount();

	operand = setoperand0();
	result = operand >> count;
	ASSERT (result == (OPERAND0 >> {count}));

	operand = setoperand1();
	result = operand >> count;
	ASSERT (result == (OPERAND1 >> {count}));
#endif
}

